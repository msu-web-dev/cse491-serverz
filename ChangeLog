2014-01-07  Titus Brown  <t@Titus-MacBook-Air-2.local>

 * Initialized repository, created server.py and README.

2014-01-14 Cameron Keif
 * Return HTTP response to client

2014-01-22 Cameron Keif
 * Added test_server.py for automated testing.
 * Return different responses for /, /content, /file, and /image paths.
 * Differentiate between GET and POST requests.

2014-01-29 Cameron Keif
 * Added support for HTML forms, using both GET and POST.

2014-02-6 Cameron Keif
* Can now handle POST requests with Content-Type of multipart/form-data
* Read requests of arbitrary size
* Utilize HTML templating
* Add 404 page

2014-02-13 Cameron Keif
* Refactor to WSGI application architecture
* Utilize HTML templating inheritance

2014-02-20 Cameron Keif
* /file and /image now serve the appropriate content types, text/plain and image/jpeg
* Utilize wsgiref validator
* Add and test with Quixote demo apps

2014-20-27 Cameron Keif
* Add cookie header handling to WSGI server
* Add image upload application, imageapp
* Modified imageapp to display latest image on index page

2014-3-20 Cameron Keif
* Implemented command line options in server.py to run imageapp, quixote demo app, and app.py
* Add twill tests for all 3 applications
* PROJECT: Change imageapp to support JPEG and TIFF. (5pts)
    
    - Summary: imageapp will now allow users to upload JPEG and TIFF images instead
      of only PNGs and display them. PNG images are still supported. Most browsers
      don't support TIFF very well without extensions.

    - This was primarily done by modifying the code in imageapp/image.py and 
      imageapp/root.py.

    - In image.py, I add_image was modified to accept an additional parameter, filename, 
      which is the filename of the image. This is added in a tuple with the image data 
      to the images dictionary in the form (filename, data).

    - Now, get_image/get_latest_image will return (filename, data). This is utilized in
      root.py. In image_raw, rather than setting the reponse content type to image/png,
      the filename is parsed to find the extension. That file extension is used to
      determine what the content type should be set to (image/jpeg for .jpg/.jpeg and
      image/tiff for .tif/.tiff). The file extension is not case senstive, .TIF will
      work just as .tif would.

2014-3-20 Cameron Keif
  * Integrated quotes app
  * Integrated chat app and added a timestamp to each image in the chat window
  * PROJECT: Add a URL that provides a list of images, resized to thumbnails (you can just img size, not
    actual resizing â€“ that will be a separate project ;).

    - Summary: There's a link on the index page to see a list of all the images that were uploaded. It shows
      the most recently updated image first.

    - I added a check in get_image_raw() to see if the request included a query parameter "num". If so, 
      rather than getting the most recent image, it gets the image at images[num]. I also added a method to
      return the count of images. Using these two things, I can make a few ajax calls in the image list page
      to iterate over images and display every image.

2014-4-2 Cameron Keif
  * PROJECT: Add the ability to comment on images
    - You can post a comment on an image from the /image page.

    - I made an Image class that has a list of comments for that string.

    - A request to the get_comments url provided an image number returns XML containing all of its comments.
      If the image number is not included it defaults to the latest image

  * PROJECT: Add url handler to refer to each image by its number.
    - /image_raw?imageNum=# will return the image with num = #.

    - If # is not numeric, or is off the end of the list, it defaults to the latest image.

    - If you go to the images list ( /image_list ) each image is a link to the URL for that image (so the
      second to the bottom image links to /image?imageNum=1 for example)

2014-4-9 Cameron Keif
	* Implement cookie app
	* Utilize SQLite to store images
	* PROJECT: Add data persistence in sqlite

	- I decided to expand on the SQLite stuff and utilize SQlite to store my
	  comments and other stuff as well. It's an actual website now omg. :)

	* PROJECT: Add starring, ranking, and a simple recommendation system for
	  your image app image list.

	- I added a field in the image_store table to hold the image's score.

	- On the image page you can upvote/downvote images. Once I have
	  authentication I can change this so each user can only upvote/downvote
		once. For now, you can just click it as much as you want.

4-10-2014 Jason Bull
	* Everything works for the most part...need to figure out why chat app is not completely working.  
	  Messages not showing on other user's screen
